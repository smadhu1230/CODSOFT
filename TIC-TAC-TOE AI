import math
board = [[' ' for _ in range(3)] for _ in range(3)]
def print_board():
    for row in board:
        print("|".join(row))
        print("-" * 5)
def is_moves_left(board):
    for row in board:
        if ' ' in row:
            return True
    return False
def evaluate(board):
    for row in range(3):
        if board[row][0] == board[row][1] == board[row][2] and board[row][0] != ' ':
            return 10 if board[row][0] == 'X' else -10
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != ' ':
            return 10 if board[0][col] == 'X' else -10
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != ' ':
        return 10 if board[0][0] == 'X' else -10

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != ' ':
        return 10 if board[0][2] == 'X' else -10
    return 0

def minimax(board, depth, is_maximizing, alpha, beta):
    score = evaluate(board)

    if score == 10:
        return score - depth  
    if score == -10:
        return score + depth  
    if not is_moves_left(board):
        return 0

    if is_maximizing:
        best = -math.inf

        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    best = max(best, minimax(board, depth + 1, False, alpha, beta))
                    board[i][j] = ' '
                    alpha = max(alpha, best)
                    if beta <= alpha:
                        break
        return best

    else:
        best = math.inf

        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    best = min(best, minimax(board, depth + 1, True, alpha, beta))
                    board[i][j] = ' '
                    beta = min(beta, best)
                    if beta <= alpha:
                        break
        return best

def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                move_val = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = ' '

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

def check_game_over():
    score = evaluate(board)
    if score == 10:
        print("AI (X) wins!")
        return True
    elif score == -10:
        print("You (O) win!")
        return True
    elif not is_moves_left(board):
        print("It's a draw!")
        return True
    return False
def play_game():
    print("Welcome to Tic-Tac-Toe!")
    print("You are O, AI is X")
    print_board()

    while True:
        while True:
            row = int(input("Enter row (0, 1, 2): "))
            col = int(input("Enter column (0, 1, 2): "))
            if board[row][col] == ' ':
                board[row][col] = 'O'
                break
            else:
                print("Invalid move! Try again.")

        print_board()
        if check_game_over():
            break

        print("AI is making its move...")
        ai_move = find_best_move(board)
        board[ai_move[0]][ai_move[1]] = 'X'
        print_board()

        if check_game_over():
            break

# Start the game
play_game()
